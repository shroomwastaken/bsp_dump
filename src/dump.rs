use std::{
	fs,
	io::Write,
};
use crate::{
	file_structure,
	VERSION
};

pub fn dump_file(
	path: String,
	file: file_structure::BSPFile,
) {
	let dump_file_path: String = path.trim_end_matches(".bsp")
	.to_owned() + "-bsp_dump.txt";
	let mut dump_file: fs::File = fs::File::create(dump_file_path)
	.unwrap();

	let mut to_write: String = format!("generated by bsp_dump {VERSION}\n");
	to_write.push_str(&format!(
		"file name: {}\n\n",
		path.split("/").last().unwrap_or(""),
	));

	//      ====header dumping====
	to_write.push_str(&format!(
		"bsp version: {}\nmap revision: {}\n\n",
		file.header.version,
		file.header.map_revision,
	));

	for l_info in file.header.lumps {
		to_write.push_str(&format!(
			"lump {} info:\n\tfile offset: {} bytes\n\t",
			l_info.index,
			l_info.file_offset,
		));
		to_write.push_str(&format!(
			"length: {} bytes\n\tversion: {}\n\tident: {:?}\n\n",
			l_info.length,
			l_info.version,
			l_info.ident,
		));
	}

	//      ====lump dumping====
	

	// done!
	println!(
		"dumping finished! wrote {} bytes",
		dump_file.write(to_write.as_bytes()).unwrap(),
	);
}